#include<stdio.h>
#include<stdlib.h>
typedef struct list
{
    int data;
    struct list *next,*prev;
}dl;


dl*makenode()
{
    dl *p;
    p=(dl *)malloc(sizeof(dl));
    p->next=0;
    p->prev=0;
    printf("Enter data\n");
    scanf("%d",&p->data);
    return p;
}


dl *addfirst(dl *h)
{
    dl*p;
    p=makenode();
    p->next=h;
    if(h)
       h->prev=p;
    return p;
}



dl *addlast(dl*h)
{
    dl *p, *t;
    p=makenode();
    if(h==0)
    {
        return p;
    }
    t=h;
    while(t->next!=0)
    {
        t=t->next;
    }
    t->next=p;
    p->prev=t;
    return h;
}


dl *delfirst(dl*h)
{
    dl*t;
    if(h==0)
    {
        printf("list did not exist");
        //getch();
        return h;
    }
    t=h;
    h=h->next;
    if(h!=0)
        h->prev=0;
    printf("Deleting %d",t->data);
    free(t);
    return h;
}


dl *dellast(dl *h)
{
    dl*t,*p;
    if(!h)
    {
        printf("List already empty");
        return h;
    }
    if(h->next==0)
    {
        printf("Deleting %d",h->data);
        free(h);
        return 0;
    }
    t=h;
    while(t->next->next!=0)
    {
        t=t->next;
    }
    p=t->next;
    t->next=0;
    printf("\n Deleting %d",p->data);
    free(p);
    return h;
}

dl *addpos(dl *h)
{
    int pos,n=0,i;
    dl *p,*t;
    if(h!=0)
       n=1;
    t=h;
    while(t->next!=0)
    {
        t=t->next;
        n++;
    }
    printf("\nWe have %d nodes.\nEnter the position where you want to add a new node...",n);
    scanf("%d",&pos);
    if(pos<1 || pos> n+1)
    {
        printf("\nMission Impossible....");
        return h;
    }
    if(pos==1)
    {
        p=addfirst(h);
        return h;
    }
    if(pos==n+1)
    {
        p=addlast(h);
        return h;
    }
    t=h;
    for(i=2;i<pos;i++)
        t=t->next;
    p=makenode();
    p->next=t->next;
    t->next->prev=p;
    p->prev=t;
    t->next=p;
    return h;
}


dl *delpos(dl *h)
{
   int i,n=0,pos;
   dl *t, *p;
   t=h;
   if(t)
   {
       n=1;
   }
   while(t->next){
       t=t->next;
       n++;
   }
   printf("\nWe have %d nodes:\nEnter the position of node to be deleted :",n);
   scanf("%d",&pos);
   if(pos<1||pos>n){
       printf("\nMission Impossible");
       return h;
   }
   if(pos==1){
       h=delfirst(h);
       return h;
   }
   if(pos==n)
   {
       h=dellast(h);
       return h;
   }
   t=h;
   for(i=2;i<pos;i++)
       t=t->next;
    p=t->next;
    t=p->prev;
    t->next=p->next;
    printf("\nDeleting %d",p->data);
    free(p);
    return h;
}


void display_forward(dl *h)
{
    if(h==0)
    {
        printf("Empty list");
    }
    while(h)
    {
        printf("\n %d",h->data);
        h=h->next;
    }
    //getch();
}


void display_backward(dl *h)
{
    if(h==0)
        printf("\nList is Empty:");
    else
        printf("Displaying Backward...\n");
    while(h->next!=0)
        h=h->next;
    while(h!=0)
    {
        printf("\n%d",h->data);
        h=h->prev;
    }   
}


void main() 
{
    dl *head=0;
    int ch;
    while(1)
    {
        printf("\n1___Add first");
        printf("\n2___Add last");
        printf("\n3___Delete first");
        printf("\n4___Delete last");
        printf("\n5___Add node on specific position ");
        printf("\n6___Delete node on specific position");
        printf("\n7___Display forward");
        printf("\n8___Display backward");
        printf("\n9___Exit");
        printf(" Enter choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: head=addfirst(head) ;
                    break;
            case 2: head=addlast(head);
                    break;
            case 3: head=delfirst(head) ;
                    break;
            case 4: head=dellast(head);
                    break;
            case 5: head=addpos(head);
                    break;
            case 6: head=delpos(head);
                    break;
            case 7: display_forward(head);
                    break;
            case 8: display_backward(head);
                    break;
            default: printf("Thanks a lot\n") ;
                      exit(0);
        }
    }
}
