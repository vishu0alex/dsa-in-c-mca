#include<stdio.h>
#include<stdlib.h>
typedef struct list
{
    int data;
    struct list *next;
}lt;


lt*makenode()
{
    lt *p;
    p=(lt *)malloc(sizeof(lt));
    p->next=0;
    printf("Enter data\n");
    scanf("%d",&p->data);
    return p;
}


lt *addfirst(lt *h)
{
    lt*p;
    p=makenode();
    p->next=h;
    return p;
}



lt *addlast(lt*h)
{
    lt *p, *t;
    p=makenode();
    if(h==0)
    {
        return p;
    }
    t=h;
    while(t->next!=0)
    {
        t=t->next;
    }
    t->next=p;
    return h;
}


lt *delfirst(lt*h)
{
    lt*t;
    if(h==0)
    {
        printf("list did not exist");
        //getch();
        return h;
    }
    t=h;
    h=h->next;
    printf("Deleting %d",t->data);
    free(t);
    return h;
}


lt *dellast(lt *h)
{
    lt*t,*p;
    if(!h)
    {
        printf("List already empty");
        return h;
    }
    if(h->next==0)
    {
        printf("Deleting %d",h->data);
        free(h);
        return 0;
    }
    t=h;
    while(t->next->next!=0)
    {
        t=t->next;
    }
    p=t->next;
    t->next=0;
    printf("\n Deleting %d",p->data);
    free(p);
    return h;
}




lt  *addpos(lt *h)
{
    int pos, n=0, i;
    lt *t, *p;
    if(h)
       n=1;
    t=h;
    while(t->next)
    {
        t=t->next;
        n++;
    }
    printf("\n we have %d nodes:\nEnter the position where you wish to add new node",n);
    scanf("%d",&pos);
    if(pos<1 || pos>n+1)
    {
        printf("\nMission Impossible");

        return h;
    }
    if(pos==1){
        h=addfirst(h);
        return h;
    }
    if(pos==n+1){
        h=addlast(h);
        return h;
    }
    t=h;
    for(i=2;i<pos;i++){
        t=t->next;
    }
    p=makenode() ;
    p->next=t->next;
    t->next=p;
    return h;
}


lt *delpos(lt *h)
{
   int i,n=0,pos;
   lt *t, *p;
   t=h;
   if(t)
   {
       n=1;
   }
   while(t->next){
       t=t->next;
       n++;
   }
   printf("\nWe have %d nodes:\nEnter the position of node to be deleted :",n);
   scanf("%d",&pos);
   if(pos<1||pos>n){
       printf("\nMission Impossible");
       return h;
   }
   if(pos==1){
       h=delfirst(h);
       return h;
   }
   if(pos==n)
   {
       h=dellast(h);
       return h;
   }
   t=h;
   for(i=2;i<pos;i++)
       t=t->next;
    p=t->next;
    t->next=p->next;
    printf("\nDeleting %d",p->data);
    free(p);
    return h;
}
    



void display(lt *h)
{
    if(h==0)
    {
        printf("Empty list");
    }
    while(h)
    {
        printf("\n %d",h->data);
        h=h->next;
    }
    //getch();
}

int main() 
{
    lt *head=0;
    int ch;
    while(1)
    {
        printf("\n1___Add first");
        printf("\n2___Add last");
        printf("\n3___Delete first");
        printf("\n4___Delete last");
        printf("\n5___Add node on specific position ");
        printf("\n6___Delete node on specific position");
        printf("\n7___Display");
        printf("\n8___Exit");
        printf(" Enter choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: head=addfirst(head) ;
                    break;
            case 2: head=addlast(head);
                    break;
            case 3: head=delfirst(head) ;
                    break;
            case 4: head=dellast(head);
                    break;
            case 5: head=addpos(head);
                    break;
            case 6: head=delpos(head);
                    break;
            case 7: display(head);
                    break;
            default: printf("Thanks a lot\n") ;
                    exit(0);
        }
    }
    return 0;
}
